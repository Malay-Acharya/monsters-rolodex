{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","placeholder","handlechange","type","onChange","App","e","setState","search","target","value","state","fetch","then","response","json","users","this","filteredmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,eACvB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,YAAf,SAEFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCLpBM,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OAClB,uBAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCwCCG,G,wDAzCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAAAI,GACf,EAAKC,SACH,CAACC,OAAOF,EAAEG,OAAOC,SAfjB,EAAKC,MAAM,CACTb,SAAS,GACTU,OAAO,KALE,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAS1C,WAAS,IAAD,EACqBC,KAAKN,MAAzBb,EADD,EACCA,SAAUU,EADX,EACWA,OACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAOY,kBAE7C,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d4e1143e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.component.css';\r\n\r\nexport const Card = (props) =>(\r\n    <div className=\"card-container\">\r\n        <img alt=\"MONSTERS\" src ={`https://robohash.org/${props.monster.id}?set=set2`}/>\r\n        <h2> {props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.component.css';\r\n\r\nexport const CardList = props => {\r\n    return (<div className='card-list'>\r\n        {\r\n          props.monsters.map(monster =>(\r\n            <Card key = {monster.id} monster = {monster}>\r\n\r\n            </Card>\r\n          ))\r\n        }\r\n    </div>\r\n    )\r\n};","import React from 'react'\r\nimport './search.component.css'\r\n\r\nexport const Search = ({ placeholder , handlechange })=>(\r\n    <input className='search'\r\n    type='search' \r\n    placeholder= {placeholder}\r\n    onChange={handlechange}>\r\n\r\n    </input>\r\n);","import { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {Search} from './components/search/search.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      search:' '\n    };\n  }\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handlechange = e =>{\n  this.setState(\n    {search:e.target.value}\n  )\n  };\n\n  render(){\n    const {monsters, search} = this.state;\n    const filteredmonsters = monsters.filter(monster=>(\n      monster.name.toLowerCase().includes(search.toLowerCase())));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholder='search Monsters'\n          handlechange = {this.handlechange}\n          />\n        <CardList monsters={filteredmonsters}>\n        </CardList>\n      </div>\n      )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}